// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const CheckUserExists = `-- name: CheckUserExists :one
SELECT COUNT(*) > 0 FROM users
WHERE email = $1
`

func (q *Queries) CheckUserExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, CheckUserExists, email)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  name,
  password,
  role_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, email, name, avatar_url, password, created_at, updated_at, deleted_at, role_id
`

type CreateUserParams struct {
	Email    string `db:"email" json:"email"`
	Name     string `db:"name" json:"name"`
	Password string `db:"password" json:"password"`
	RoleID   int32  `db:"role_id" json:"role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, CreateUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const GetAllUsers = `-- name: GetAllUsers :many
SELECT id, email, name, avatar_url, password, created_at, updated_at, deleted_at, role_id FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, GetAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.AvatarUrl,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, avatar_url, password, created_at, updated_at, deleted_at, role_id FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const GetUserWithRoleByEmail = `-- name: GetUserWithRoleByEmail :one
SELECT
  u.id,
  u.email,
  u.name,
  u.password,
  r.name as role_name
FROM
  users u
JOIN
  roles r ON u.role_id = r.id
WHERE
  u.email = $1
LIMIT 1
`

type GetUserWithRoleByEmailRow struct {
	ID       uuid.UUID `db:"id" json:"id"`
	Email    string    `db:"email" json:"email"`
	Name     string    `db:"name" json:"name"`
	Password string    `db:"password" json:"password"`
	RoleName string    `db:"role_name" json:"role_name"`
}

func (q *Queries) GetUserWithRoleByEmail(ctx context.Context, email string) (GetUserWithRoleByEmailRow, error) {
	row := q.db.QueryRow(ctx, GetUserWithRoleByEmail, email)
	var i GetUserWithRoleByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.RoleName,
	)
	return i, err
}
